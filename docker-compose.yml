### Compose file format version key removed; modern Compose ignores it.
### Keeping the file concise avoids the warning.

services:
  kafka:
    image: confluentinc/cp-kafka:7.8.3
    container_name: kafka
    environment:
      - KAFKA_KRAFT_MODE=true
      - CLUSTER_ID=1L6g7nGhU-eAKfL--X25wo
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_LOG_DIRS=/var/lib/kafka/data
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 >/dev/null 2>&1"]
      interval: 5s
      timeout: 5s
      retries: 12
      start_period: 20s
    networks:
      - sensor-net

  producer-a:
    image: sensor-producer
    build:
      context: .
      dockerfile: ./producers/dockerfile
    pull_policy: never
    container_name: producer-a
    environment:
      - PRODUCER=producer_A.py
      - ROW_LIMIT=4000
      - KAFKA_BROKER=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - sensor-net

  producer-b:
    image: sensor-producer
    build:
      context: .
      dockerfile: ./producers/dockerfile
    pull_policy: never
    container_name: producer-b
    environment:
      - PRODUCER=producer_B.py
      - ROW_LIMIT=4000
      - KAFKA_BROKER=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - sensor-net

  producer-c:
    image: sensor-producer
    build:
      context: .
      dockerfile: ./producers/dockerfile
    pull_policy: never
    container_name: producer-c
    environment:
      - PRODUCER=producer_C.py
      - ROW_LIMIT=4000
      - KAFKA_BROKER=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - sensor-net

  clickhouse-server:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse-server
    environment:
      - CLICKHOUSE_DB=default
      - CLICKHOUSE_USER=sensor
      - CLICKHOUSE_PASSWORD=sensorpass
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    ports:
      - "8123:8123" # HTTP interface
      - "9000:9000" # Native TCP interface
    networks:
      - sensor-net
    volumes:
      - ./clickhouse_setup:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: consumer
    command: ["python", "-u", "consumer.py"]
    environment:
      - KAFKA_BROKER=kafka:9092
      - CLICKHOUSE_HOST=clickhouse-server
      - CLICKHOUSE_USER=sensor
      - CLICKHOUSE_PASSWORD=sensorpass
      - CLICKHOUSE_DB=default
      - KAFKA_TOPIC=sensor_data
      - BATCH_SIZE=20
      - FLUSH_INTERVAL_SEC=1.0
    depends_on:
      kafka:
        condition: service_healthy
      clickhouse-server:
        condition: service_healthy
    networks:
      - sensor-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-changeMeStrong!}
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clickhouse-datasource
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      clickhouse-server:
        condition: service_healthy
      loki:
        condition: service_healthy
    networks:
      - sensor-net

  loki:
    image: grafana/loki:2.9.8
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/config.yml
    volumes:
      - ./loki/config.yml:/etc/loki/config.yml:ro
      - loki-data:/loki
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:3100/loki/api/v1/labels || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 12
      start_period: 10s
    networks:
      - sensor-net

  promtail:
    image: grafana/promtail:2.9.8
    container_name: promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./promtail/config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      loki:
        condition: service_healthy
    networks:
      - sensor-net

volumes:
  loki-data: {}

networks:
  sensor-net:
    driver: bridge